// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for answering medical questions.
 *
 * - answerMedicalQuestions - A function that takes a medical question as input and returns an answer from the AI chatbot.
 * - AnswerMedicalQuestionsInput - The input type for the answerMedicalQuestions function.
 * - AnswerMedicalQuestionsOutput - The return type for the answerMedicalQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerMedicalQuestionsInputSchema = z.object({
  question: z.string().describe('The medical question to be answered.'),
});
export type AnswerMedicalQuestionsInput = z.infer<typeof AnswerMedicalQuestionsInputSchema>;

const AnswerMedicalQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the medical question.'),
});
export type AnswerMedicalQuestionsOutput = z.infer<typeof AnswerMedicalQuestionsOutputSchema>;

export async function answerMedicalQuestions(input: AnswerMedicalQuestionsInput): Promise<AnswerMedicalQuestionsOutput> {
  return answerMedicalQuestionsFlow(input);
}

const answerMedicalQuestionsPrompt = ai.definePrompt({
  name: 'answerMedicalQuestionsPrompt',
  input: {schema: AnswerMedicalQuestionsInputSchema},
  output: {schema: AnswerMedicalQuestionsOutputSchema},
  prompt: `You are a medical chatbot designed to answer medical questions accurately and concisely.

  Question: {{{question}}}
  Answer: `,
});

const answerMedicalQuestionsFlow = ai.defineFlow(
  {
    name: 'answerMedicalQuestionsFlow',
    inputSchema: AnswerMedicalQuestionsInputSchema,
    outputSchema: AnswerMedicalQuestionsOutputSchema,
  },
  async input => {
    const {output} = await answerMedicalQuestionsPrompt(input);
    return output!;
  }
);
